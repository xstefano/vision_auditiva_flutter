import 'dart:async';
import 'dart:convert';
import 'api_service.dart';

import 'package:flutter/material.dart';
import 'package:permission_handler/permission_handler.dart';

import 'package:flutter_tts/flutter_tts.dart';
import 'package:speech_to_text/speech_to_text.dart';
import 'package:speech_to_text/speech_recognition_result.dart';

import 'package:logger/logger.dart';
import 'package:camera/camera.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.green),
        useMaterial3: true,
      ),
      home: const MyHomePage(title: 'Visual APP'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({Key? key, required this.title}) : super(key: key);
  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final FlutterTts flutterTts = FlutterTts();
  SpeechToText speech = SpeechToText();
  final logger = Logger();
  String lastWords = '';
  String base64Image = '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';

  final optionsMap = {
    'analiza objeto': [
      'AnalizarObjetos',
      'Se analizará los objetos de la imagen',
    ],
    'detecta rostro': [
      'DetectarRostro',
      'Se detectará los rostro de la imagen',
    ],
    'analiza rostro': [
      'AnalizarRostro',
      'Se analizará el rostro de la imagen',
    ],
  };

  final optionsMap2 = {
    'describe imagen': [
      'DescribirImagen',
      'La imagen se va a describir espere unos segundos para que finalice',
    ],
    'lee texto': [
      'LeerTexto',
      'Se leera el texto de la imagen',
    ],
  };

  CameraController? cameraController;
  late List<CameraDescription> cameras;

  @override
  void initState() {
    super.initState();
    _start();
  }

  Future<void> _initializeCamera() async {
    cameras = await availableCameras();
    cameraController = CameraController(
      cameras[0],
      ResolutionPreset.max,
    );
    await cameraController!.initialize();
  }

  Future<void> takePicture() async {
    XFile? picture = await cameraController!.takePicture();
    List<int> bytes = await picture.readAsBytes();
    base64Image = base64Encode(bytes);
    await ApiService.sendImage(base64Image, "image");
  }

  Future<void> _speak(String text) async {
    await flutterTts.setLanguage('es-ES');
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.7);
    await flutterTts.speak(text);
  }

  Future<void> _requestMicrophonePermission() async {
    var status = await Permission.microphone.request();
    if (status != PermissionStatus.granted) {
      return _speak('¡Es necesario acceder al microfono');
    }
    return _speak('¡Permiso de micrófono concedido!');
  }

  Future<void> _start() async {
    await flutterTts.awaitSpeakCompletion(true);
    await _speak('Hola, Bienvenido a See Signal');
    await _requestMicrophonePermission();
    _initializeCamera();
  }

  Future<void> startListening() async {
    lastWords = '';
    bool isAvailable = await speech.initialize();
    if (isAvailable) {
      takePicture();
      await speech.listen(
        onResult: resultListener,
        localeId: 'es_CL',
      );
    }
  }

  Future<void> resultListener(SpeechRecognitionResult result) async {
    if (result.finalResult) {
      logger.i(
          'Result listener final: ${result.finalResult}, words: ${result.recognizedWords}');
      setState(() {
        lastWords = removeDiacritics(result.recognizedWords).toLowerCase();
      });

      // Verificar si las palabras reconocidas están en el mapa de opciones
      final option = optionsMap.keys.firstWhere(
        (key) => key.split(' ').every((word) => lastWords.contains(word)),
        orElse: () => '',
      );

      final option2 = optionsMap2.keys.firstWhere(
        (key) => key.split(' ').every((word) => lastWords.contains(word)),
        orElse: () => '',
      );

      // Si la opción existe, realizar la acción correspondiente
      if (option.isNotEmpty) {
        final action = optionsMap[option]!;
        await ApiService.sendRequest(action[0]);
        _speak(action[1]);
        await Future.delayed(const Duration(seconds: 5));
        final lastResponse = await ApiService.getLastResponse();
        _speak(lastResponse);
      }
      if (option2.isNotEmpty) {
        final action2 = optionsMap2[option2]!;

        if (action2[0] == "DescribirImagen") {
          String response = await ApiService.getImageDescription();
          _speak(response);
        } else if (action2[0] == "LeerTexto") {
          String response = await ApiService.getImageTexto();
          _speak(response);
        }
      }

      if (option.isEmpty && option2.isEmpty) {
        _speak("No se ha detectado ningun método...");
      }
    }
  }

  String removeDiacritics(String str) {
    var withDia =
        'ÀÁÂÃÄÅàáâãäåÒÓÔÕÕÖØòóôõöøÈÉÊËèéêëðÇçÐÌÍÎÏìíîïÙÚÛÜùúûüÑñŠšŸÿýŽž';
    var withoutDia =
        'AAAAAAaaaaaaOOOOOOOooooooEEEEeeeeeCcDIIIIiiiiUUUUuuuuNnSsYyyZz';

    for (int i = 0; i < withDia.length; i++) {
      str = str.replaceAll(withDia[i], withoutDia[i]);
    }

    return str;
  }


@override
Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(
      backgroundColor: Theme.of(context).colorScheme.inversePrimary,
      title: Text(widget.title),
    ),
    body: Column(
      children: [
        Expanded(
          child: Align(
            alignment: Alignment.topCenter,
            child: Container(
              height: 200.0, // Alto fijo de la imagen
              child: base64Image != null
                  ? Image.memory(
                      base64Decode(base64Image),
                      fit: BoxFit.cover,
                    )
                  : Container(),
            ),
          ),
        ),
        Align(
          alignment: Alignment.bottomCenter,
          child: Container(
            width: 400.0, // Ancho fijo del botón
            height: 500.0, // Alto fijo del botón
            margin: EdgeInsets.only(bottom: 16.0),
            child: FloatingActionButton(
              onPressed: startListening,
              child: const Icon(Icons.mic),
            ),
          ),
        ),
      ],
    ),
    floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,
  );
}

}